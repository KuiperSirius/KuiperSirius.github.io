<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>暮城雨烟</title>
  
  <subtitle>The Sound of Silence</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.kixcs.com/"/>
  <updated>2020-02-27T11:49:44.517Z</updated>
  <id>https://blog.kixcs.com/</id>
  
  <author>
    <name>夜阑听烟雨</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>论北魏士族的门第等级</title>
    <link href="https://blog.kixcs.com/archives/25c7/"/>
    <id>https://blog.kixcs.com/archives/25c7/</id>
    <published>2020-02-27T11:44:56.000Z</published>
    <updated>2020-02-27T11:49:44.517Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><p>阀阅流品乃中古士族制度的核心要义，家世背景是身份地位和权益分配的决定因素。经历士族化风潮洗礼的北魏深得其中精髓，它遵循从旧原则，以具有蓝本意义的晋品令为基准，综合统计曾祖、祖父、父亲三代的官爵世资，均值一至三品者为膏腴，四至五品者为甲乙丙丁四姓。这两者的层级位差突出表现在乡品和起家官品方面，常制膏腴乡品一品，以五品官释褐；四姓乡品二品，以六品官释褐。这种新格局不仅造成士庶天隔，即便在士族阶层内部也出现分野。北魏秉承魏晋士族制旨趣，结合现实统治需要，形成唯门第是从的贵族体制，但它阻塞社会流动，造成身份凝固，势必让位于上下对流通畅、洋溢生机活力的庶民时代。</p><p>门阀士族体制牢固支配六朝社会，塑造中国古代特色鲜明的独立时段。它唯门第是从，遵奉流品理念，按家世背景捍卫森严的身份等级壁垒，构建各居其位、各司其职、各得其所、彼此隔绝的权利格局。在此环境下，非但士庶鸿沟无法逾越，即便士族内部的细密分野亦不容染指。无怪日本学者宫崎市定慨叹：“大凡贵族社会是阶层社会，自上俯视，阶层无限；自下仰望，也是阶层无限。”154魏晋南朝历史底蕴深厚，阀阅序列清晰明辨；拓跋鲜卑建立的北魏政权在士族化道路上亦步亦趋，更是把汉人约定俗成的某些惯例以法律形式贯彻执行90-91。从这个意义上说，北魏对中古士族传统进行了全面且系统的归纳概括和提炼升华。故而，探讨北魏士族门第的形成、划分及相应的利益配置关系，既可了解六朝整部士族制度的运作机理，又能透视拓跋统治集团独特的构造与演进趋势，学术价值不言而喻。现有研究成果除前引宫崎市定和唐长孺的著述外，值得重视的还有毛汉光《两晋南北朝主要文官士族成分的统计分析与比较》146和祝总斌《试论魏晋南北朝的门阀制度》174两篇文章。他们初步找到北魏门第甄别的体制依据和标准，但仍存在很多逻辑漏洞亟待填补，特别是局限于相关诏令文本的解读，缺乏家族具体实例的完整分析，难以揭示士族分层之总体面貌。</p><p>北魏门第等级制度不会仅停留在纸面上，必定伴随士族化进程的深入付诸实践，切实成为资源配置的标尺。照此逻辑逆推，不同层位的士族只要在某项待遇上保持规律性的数量级差，就能间接证实该制度的客观存在。关键是选择哪项待遇充当研究对象。众所周知，士族特权集中体现在仕进方面，而整个仕途中最能反映家世信息的莫过释褐环节，故笔者特以此为媒介揭示士族内部的分野。所谓释褐，又称出身、起家、解巾等，专指士人登仕首次授予公职的过程，标志着由体制外的庶民蜕变为体制内的官僚。释褐作为宦场竞赛的起跑线，身份不同则位置各异。据传：“孝文帝制，出身之人，本以门品高下有恒，若准资荫，自公卿令仆之子，甲乙丙丁之族，上则散骑秘著，下逮御史长兼，皆条例昭然，文无亏没。”[10]卷一六，390-391足见，起家官与世资门第成固定比例紧密搭配，说明释褐确有折射阀阅等第之功能，笔者的思路在技术上是完全可行的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    <content src="https://blog.kixcs.com/https://cdn.jsdelivr.net/gh/KuiperSirius/larix.cc@v1.0.9/article/article_img_31.jpg" type="image" />
    
    
      <category term="文学" scheme="https://blog.kixcs.com/categories/literature/"/>
    
    
      <category term="History" scheme="https://blog.kixcs.com/tags/History/"/>
    
  </entry>
  
  <entry>
    <title>关于网络异常流量清洗系统的若干思考</title>
    <link href="https://blog.kixcs.com/archives/3ac5/"/>
    <id>https://blog.kixcs.com/archives/3ac5/</id>
    <published>2020-02-26T13:58:32.000Z</published>
    <updated>2020-02-26T14:04:22.335Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><p>随着网络技术和网络经济的发展，网络的重要性日益突出。与此同时，网络中存在的安全漏洞也在相应的增加，网络安全问题所造成的影响也越来越大，另一方面给企业和社会的影响带来了恶劣影响。据显示，DDoS攻击中，90%以上属于TCP协议栈攻击)，因此在当前大流量、分布广、隐蔽性强的DDoS攻击环境下，如何有效防范DDos攻击对维护当前网络稳定性与安全性具有重要意义。</p><p>企业传统的DDoS攻击防御方式往往只能被动的不计成本的采用不断提升服务器性能和带宽的方式来保障自己企业的正常业务所需要的资源。随着DDoS攻击的规模不断增大，攻击手段不断智能化，这种通过预留资源的方式防御DDoS攻击的效果日益不明显。因此，专业的DDoS攻击防御方案对现今的企业核心网络业务保障来说显得尤为重要。</p><p>从城域网中接入的用户角度来看，在面临大量DDoS攻击的情况下，企业需要升级当前DDoS攻击防御系统，然而DDoS攻击自身的复杂性导致了企业难以独立完成对DDoS的防御；从运营商的角度来说，通过对城域网中大量的DDoS流量的过滤，可以有效减少城域网自身的负载，为城域网的业务提供有效的保障，同时也能够促进自身的发展；综上所述，在城域网侧为企业客户开展流量清洗实现对DDoS攻击的防御，可以同时满足运营商和大客户的双重需要，已经成为目前运营商的必然需求。</p><p>自1999年8月第一起DDoS攻击发生以来，人们就对DDoS攻击及其对策展开了深入的研究。1999年11月，CERT/CC发表的Distributed-Systems Intruder Tools Workshop报告中，最早全面阐述了DDoS攻击的原理，并针对系统管理员、ISP、 以及事件响应小组，从预防、检测、响应三方面依次给出了即时、短期、长期的解决方案。随后，SANS和Cisco Systerms 等几个著名的安全组织、公司，也针对DDoS攻击的防御提出了见解。华盛顿大学的Dave Dittrich 在Distributed Denial of Service(DDoS)Attacks/tools提出了最新的DDoS攻击及防御的研究资料。在攻击工具研究方面，许多DDoS攻击工具(如: Trinoo、 TFN、Stacheldraht、TFN2K、Shaft、 Mstream 等)被详细地分析。一方 面为防御DDoS攻击提供重要参考:另一方面攻击者利用相关信息进一步改进攻击工具。Mixter在Tribe Flood Network 3000 中对DDoS攻击工具进行了理论性的评价，并给出了网络入侵检测规则。</p><p>在防御研究方面，人们从攻击前防御、攻击期间防范和攻击后防御等方面对DDoS防御措施进行了深入研究,研究的方向主要体现在攻击中的检测与过滤技术以及攻击后的攻击源追踪技术。Farguson和Senie基于DDoS攻击伪造源IP地址的特性，提出了入口报文过滤技术。该技术从理论来说，能够有效杜绝DDoS攻击，然而就实现而言，部署难度大不易实施。Park和Lee提出的基于路由报文过滤机制。该技术使用BGP信息来识别伪造源IP地址的报文。实验表明，如果采用此方案有效防范DDoS攻击，就需要在18%的Internet核心路由器上部署该机制。同样，该方案的部署仍然困难。</p><p>目前，研究主要通过在受害者和ISP网络上游部署检测与过滤机制，进行攻击报文过滤。其弊端在于，当大规模的DDoS攻击发生时，该机制的防范效率明显降低。Bellovin 在Internet Draft:ICMP Traceback Messages中提议，利用路由器向目的IP发送ICMP Traceback Messages重建攻击流的路径。Barros 基于Bellovin 的方案进行了改进，以适用于反射式DDoS攻击。</p><p>2000年，Burch 和Cheswick提出通过报文记载其路由信息。路由器在报文头部(随机或确定)写入地址信息，接收方根据此报文构建路由路径。Savage 等深入的研究了概率性报文标记机制，并提出地址信息标记方法。随后，Song 和Perrig提出了更为精简的报文标记算法，该算法的路径恢复更加快捷。Snoren 等提出基于Hash的IP Traceback技术，该技术利用源路径重构攻击流路径。当DDoS攻击存在大量攻击源时，IP Traceback技术追踪攻击源的效率会明显下降。在DDoS预防、攻击缓解和攻击流偏转、以及攻击记录的分析等方面，不少研究集中于网络和主机DDoS攻击下的可存活性研究以及构建DDoS攻击容忍网络。从国内外对DDoS研究的现状来看，在大规模DDoS攻击的情况下，很多DDoS防范技术的防御能力效率显著下降，攻击者通过对攻击工具的改进，很容易向目标机器发起DDoS攻击，因此DDoS防范措施还需要进一步改进。</p><p>随着计算机的不断普及与应用，在大规模DDoS网络流量下，传统防范技术对服务器的防范能力已不再奏效。基于此种情况本文提出了流量清洗的方法来防范SYN Flood攻击。大量攻击者通过占用带宽和抢占资源方式致使目标服务器发生拒绝服务，进而影响了运营商和企业的正常业务。</p><p>针对SYN Flood攻击隐蔽性强、规模大等特点，本文提出了流量清洗防范的思想。流量清洗防范采用层次过滤的方式，将网络总流量区分可信源流量、不可信源流量和未知源流量，并根据网络状态进行具体处理。基于用户需求，将流量清洗系统划分为功能模块和公共模块。功能模块包括统计分析模块、流牵引模块、清洗平台和半连接处理:公共模块包括特征库模块和总连接计数模块。统计分析模块进行黑名单和白名单匹配，完成对网络流量的初步过滤;流牵引模块通过设置SYN速率限值，判断是否需要对异常流量二次过滤;半连接处理接收清洗平台处理结果，建立生成动态列表信息，并更新特征库参数;总连接计数模块处理IN方向和OUT方向的报文，完成特征库全连接总数的更新。</p><p>流量清洗系统基于需求设计实现后，对网络流量进行了层次过滤。从验证结果来看，系统对攻击者识别的准确率提高，同时也增强了对SYN Flood攻击的处理与防御能力。</p><p>为了提高企业或运营商在遭受大量DDoS攻击时对DDoS的防御能力，流量清洗系统欲采用网络流量层次性过滤的思想，通过对整体流量进行区分处理。对设备接收的流量区分为可信源流量、未知源流量和不可信源流量，并针对三种流量依次诵过系统相关模块进行初步讨滤、二次过滤、cookie验证和建立动杰名单等外理。流量清洗系统根据用户需求将整体系统划分四个主要模块(包括统计分析模块、流牵引模块、清洗平台和半连接处理)和二个公共模块(总连接计数和特征库模块)。以下模块为论文所涉及的主要工作:</p><p>(1)在统计分析模块中将对流量进行初步过滤。对IN方向的流量，通过黑、白名单匹配，放行可信源流量;根据当前网络状态，对未知源和不可信源流量，判断是否需要对报文做丢包处理。</p><p>(2)在流牵引模块中，将对进入设备的流量进行二次过滤。通过设置SYN限值判断是否对未知源流量和不可信源流量进行清洗处理。</p><p>(3)在半连接处理中，将通过接收清洗平台处理结果，生成动态列表信息，包括动态白名单列表和动态黑名单列表，并更新特征库相应参数信息。</p><p>(4)总连接计数模块的处理主要集中报文的IN方向和OUT方向，根据接收报文类型进行相关处理，并完成对特征库中全连接总数的更新。</p><p>流量清洗系统划分为功能模块和公共模块。功能模块包括统计分析模块、流牵引模块、清洗平台和半连接处理;公共模块包括特征库模块和总连接计数模块。</p><p>统计分析模块从特征库中获取黑、白名单列表信息，完成刘流量区分，并依据网络状态对总体流量进行初步过滤;</p><p>流牵引模块在统计分析模块处理的基础上，对网络流量进行第二次过滤。通过设置SYN限值，判断是否需要对未知源流量和不可信源流量做清洗处理.</p><p>半连接处理通过接收清洗平台的处理结果，生成动态列表信息，包括动态白名单列表和动态黑名单列表，并更新特征库相应参数。</p><p>总连接计数模块的处理主要集中报文的IN方向和OUT方向，通过对总连接计数模块的处理完成特征库中全连接总数的更新。</p>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    <content src="https://blog.kixcs.com/https://cdn.jsdelivr.net/gh/KuiperSirius/larix.cc@v1.0.9/article/article_img_32.jpg" type="image" />
    
    
      <category term="随想" scheme="https://blog.kixcs.com/categories/thinking/"/>
    
    
      <category term="DDoS" scheme="https://blog.kixcs.com/tags/DDoS/"/>
    
  </entry>
  
  <entry>
    <title>浅析Google人工智能系统TensorFlow</title>
    <link href="https://blog.kixcs.com/archives/4cb2/"/>
    <id>https://blog.kixcs.com/archives/4cb2/</id>
    <published>2020-02-26T13:39:16.000Z</published>
    <updated>2020-02-26T14:08:38.783Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h1 id="背景及概述"><a href="#背景及概述" class="headerlink" title="背景及概述"></a>背景及概述</h1><p>2016年3月份，Google的围棋人工智能程序AlphaGo以4比1的大比分，战胜人类选手李世石，在全球成功引起广泛关注，引起了一波人工智能的热潮。从智能手机的语音助手，到相机的人脸识别，人工智能技术已经进入到我们生活的方方面面，在未来将深刻的影响我们的生活。为了加速深度学习领域的发展，2015年11月9日，Google发布深度学习框架TensorFlow并宣布开源。在短短的一年时间内，在GitHub上，TensorFlow就成为了最流行的深度学习项目。截至今天，短短的两年内，其 GitHub 库大约 845 个贡献者共提交超过 17000 次。</p><p>详细的来说，TensorFlow 是一个开源的、基于 Python 的机器学习框架，由 Google Brain 团队为深度神经网络（DNN）开发的功能强大的开源软件库，在 Apache 2.x 协议许可下可用，并在图形分类、音频处理、推荐系统和自然语言处理等场景下有着丰富的应用，是目前最热门的机器学习框架。</p><p>Google在很多年前就已经开始把深度学习的技术应用到很多产品当中，在这个过程当中，Google也迭代、开发了好几代支持深度学习的软件系统, TensorFlow现在已经演化成一个相当完整的深度学习软件开放平台。</p><h2 id="TensorFlow的应用场景"><a href="#TensorFlow的应用场景" class="headerlink" title="TensorFlow的应用场景"></a>TensorFlow的应用场景</h2><p>TensorFlow有诸多应用场景，例如: TensorFlow支持多种硬件的平台, 比如说，它支持CPU、GPU混合搭建的数据中心的训练平台，它也支持将数据中心训练好的模型，相对便捷地部署到不同的移动端应用上，可以支持类似Google自主研发的TPU处理器; TensorFlow支持多种开发环境: 支持多种硬件的平台是基础，TensorFlow一直以来的一个目标，就是能够帮助尽量多的开发者，能够把深度学习的技术利用起来，最终使得广大的用户从中能力得到益处，基于这个想法，TensorFlow一直很重视多种程序员开发环境的支持。比如说，开发者可以在主要的开发环境中使用TensorFlow。TensorFlow在Google内部的应用推广是非常全面和彻底的，比如说TensorFlow很早就帮助Google的核心业务（搜索和广告），实施了深度学习的模型，并且在核心业务上体现了它的性能。在垃圾邮件过滤中，Google也使用了TensorFlow训练的模型，同时在安卓的应用程序推荐上，也上线了TensorFlow的模型等等。TensorFlow深入移动端,</p><p>任何曾经试图在 Python 中只利用 NumPy 编写神经网络代码的人都知道那是多么麻烦。编写一个简单的一层前馈网络的代码尚且需要 40 多行代码，当增加层数时，编写代码将会更加困难，执行时间也会更长。TensorFlow 使这一切变得更加简单快捷，从而缩短了想法到部署之间的实现时间。</p><p>就TensorFlow的原理而言 ，TensorFlow 允许将深度神经网络的计算部署到任意数量的 CPU 或 GPU 的服务器、PC 或移动设备上，且只利用一个 TensorFlow API。相较于其他的深度学习库而言，如 Torch、Theano、Caffe 和 MxNet，包括 TensorFlow 在内的大多数深度学习库能够自动求导、开源、支持多种 CPU/GPU、拥有预训练模型，并支持常用的NN架构，如递归神经网络（RNN）、卷积神经网络（CNN）和深度置信网络（DBN）。</p><p>TensorFlow 则还有更多的特点，如下：支持所有流行语言，如 Python、C++、Java、R和Go；可以在多种平台上工作，甚至是移动平台和分布式平台；它受到大多数主流云计算服务平台（AWS、Google和Azure）的支持；Keras——高级神经网络 API，已经与 TensorFlow 整合；与 Torch/Theano 比较，TensorFlow 拥有更好的计算图表可视化；允许模型部署到工业生产中，并且容易使用；有非常好的社区支持；TensorFlow 不仅仅是一个软件库，它是一套包括 TensorFlow，TensorBoard 和 TensorServing 的软件。</p><p>谷歌 research 博客列出了全球一些使用 TensorFlow 开发的有趣项目：Google 翻译运用了 TensorFlow 和 TPU（Tensor Processing Units）；Project Magenta 能够使用强化学习模型生成音乐，运用了 TensorFlow；澳大利亚海洋生物学家与来自昆士兰大学（Queensland University）的计算机科学家合作，使用了 TensorFlow 来发现和理解濒临灭绝的海牛；一位日本农民运用 TensorFlow 开发了一个应用程序，使用大小和形状等物理特性对黄瓜进行分类；在医学领域，发射科的医生通过采用TensorFlow，使其在医学扫描中能够识别帕金森病的迹象。湾区的数据科学家在树莓派上使用TensorFlow来追踪记录加州火车的动态。</p><p>为了更好地理解TensorFLow,首先要明白Tensorflow 不是一个普通的 Python 库，大多数 Python 库被编写为 Python 的自然扩展形式。当开发者导入一个库时，开发者得到的是一组变量、函数和类，它们补充并扩展了代码“工具箱”。 Python 和 Tensorflow 之间的联系，可以类比 Javascript 和 HTML 之间的关系。Javascript 是一种全功能的编程语言，可以实现各种出色的效果。HTML 是用于表示某种类型的实用计算抽象（这里指的是可由 Web 浏览器呈现的内容）的框架。Javascript 在交互式网页中的作用是组装浏览器看到的 HTML 对象，然后在需要时通过将其更新为新的 HTML 来与其交互。与 HTML 类似，Tensorflow 是用于表示某种类型的计算抽象（称为“计算图”）的框架。当开发者用 Python 操作 Tensorflow 时，开发者用 Python 代码做的第一件事是组装计算图。之后第二个任务就是与它进行交互（使用 Tensorflow 的“会话”）。但重要的是，要记住计算图不在变量内部，它处在全局命名空间内。莎士比亚曾经说过：“所有的 RAM 都是一个阶段，所有的变量都只不过是指针。”</p><h2 id="TensorFlow的技术细节"><a href="#TensorFlow的技术细节" class="headerlink" title="TensorFlow的技术细节"></a>TensorFlow的技术细节</h2><p>Tensorflow的第一个关键抽象：计算图。计算图实质上是一个全局数据结构：计算图是一个有向图，捕获有关计算方法的指令。第二个关键抽象：会话。会话的作用是处理内存分配和优化，使开发者能够实际执行由图形指定的计算。可以将计算图想象为我们想要执行的计算的“模板”：它列出了所有的步骤。为了使用这个图表，开发者还需要发起一个会话，它使开发者能够实际地完成任务。例如，遍历模板的所有节点来分配一组用于存储计算输出的存储器。为了使用 Tensorflow 进行各种计算，我们既需要图也需要会话。会话包含一个指向全局图的指针，该指针通过指向所有节点的指针不断更新。这意味着在创建节点之前还是之后创建会话都无所谓。创建会话对象后，可以使用 sess.run(node) 返回节点的值，并且 Tensorflow 将执行确定该值所需的所有计算。</p><p>Tensorflow 仅通过必需的节点自动路由计算这一事实是它的巨大优势。如果计算图非常大并且有许多不必要的节点，它就能节约大量运行时间。它允许我们构建大型的“多用途”图形，这些图形使用单个共享的核心节点集合根据采取的计算路径来做不同的任务。对于几乎所有应用程序而言，根据所采用的计算路径考虑 sess.run() 的调用方法是很重要的。关于变量和副作用，对Tensorflow而言，了解变量对于使用进行深度学习来说至关重要，因为模型的参数就是变量。在训练期间，你希望通过梯度下降在每个步骤更新参数，但在计算过程中，开发者希望保持参数不变，并将大量不同的测试输入集传入到模型中。模型所有的可训练参数很有可能都是变量。</p><p>为了进一步了解TensorFlow，下面进行对TensorFlow的一些简介：</p><h3 id="张量和图"><a href="#张量和图" class="headerlink" title="张量和图:"></a>张量和图:</h3><p>TensorFlow 是一种采用数据流图（data flow graphs），用于数值计算的开源软件库。其中 Tensor 代表传递的数据为张量（多维数组），Flow 代表使用计算图进行运算。数据流图用「结点」（nodes）和「边」（edges）组成的有向图来描述数学运算。「结点」一般用来表示施加的数学操作，但也可以表示数据输入的起点和输出的终点，或者是读取/写入持久变量（persistent variable）的终点。边表示结点之间的输入/输出关系。这些数据边可以传送维度可动态调整的多维数据数组，即张量（tensor）。在 Tensorflow 中，所有不同的变量和运算都是储存在计算图。所以在我们构建完模型所需要的图之后，还需要打开一个会话（Session）来运行整个计算图。在会话中，我们可以将所有计算分配到可用的 CPU 和 GPU 资源中。</p><h3 id="常量和变量："><a href="#常量和变量：" class="headerlink" title="常量和变量："></a>常量和变量：</h3><p>TensorFlow 中最基本的单位是常量（Constant）、变量（Variable）和占位符（Placeholder）。常量定义后值和维度不可变，变量定义后值可变而维度不可变。在神经网络中，变量一般可作为储存权重和其他信息的矩阵，而常量可作为储存超参数或其他结构信息的变量。</p><h3 id="占位符和feed-dict"><a href="#占位符和feed-dict" class="headerlink" title="占位符和feed_dict"></a>占位符和feed_dict</h3><p>我们已经创建了各种形式的常量和变量，但 TensorFlow 同样还支持占位符。占位符并没有初始值，它只会分配必要的内存。在会话中，占位符可以使用 feed_dict 馈送数据。feed_dict 是一个字典，在字典中需要给出每一个用到的占位符的取值。在训练神经网络时需要每次提供一个批量的训练样本，如果每次迭代选取的数据要通过常量表示，那么 TensorFlow 的计算图会非常大。因为每增加一个常量，TensorFlow 都会在计算图中增加一个结点。所以说拥有几百万次迭代的神经网络会拥有极其庞大的计算图，而占位符却可以解决这一点，它只会拥有占位符这一个结点。</p><h3 id="TensorFlow中的神经网络"><a href="#TensorFlow中的神经网络" class="headerlink" title="TensorFlow中的神经网络:"></a>TensorFlow中的神经网络:</h3><p>输入数据集，数据集分为训练数据集和标注、测试数据集和标注（包括验证数据集和标注）。测试和验证集能赋值到constant() 中，而训练集可以导入 tf.placeholder() 中，训练集只有导入占位符我们才能在随机梯度下降中成批量地进行训练。确定神经网络模型，该模型可以是简单的一层全连接网络或 9 层、16 层的复杂卷积网络组成。网络定义的权重矩阵和偏置向量后需要执行初始化，每一层需要一个权重矩阵和一个偏置向量。构建损失函数，并计算训练损失。模型会输出一个预测向量，我们可以比较预测标签和真实标签并使用交叉熵函数和 softmax 回归来确定损失值。训练损失衡量预测值和真实值之间差距，并用于更新权重矩阵。优化器，优化器将使用计算的损失值和反向传播算法更新权重和偏置项参数。</p><h3 id="TensorFlow中的深度神经网络"><a href="#TensorFlow中的深度神经网络" class="headerlink" title="TensorFlow中的深度神经网络:"></a>TensorFlow中的深度神经网络:</h3><p>LeNet5 由两个卷积层加上三个全连接层组成，因此它是一种浅层神经网络。卷积神经网络最出名的就是 2012 年所提出的 AlexNet、2013 年的 7 层 ZF-Net 和 2014 年提出的 16 层 VGGNet。到了 2015 年，谷歌通过 Inception 模块开发出 22 层的卷积神经网络 （GoogLeNet），而微软亚洲研究院创造出了 152 层的卷积神经网络：ResNet。</p><h2 id="Google-I-O上的TensorFlow"><a href="#Google-I-O上的TensorFlow" class="headerlink" title="Google I/O上的TensorFlow"></a>Google I/O上的TensorFlow</h2><p>在2017年Google I/O开发者大会上，同时提出的还有Google Tensor Lite。TensorFlow Lite 是 TensorFlow 移动和嵌入式设备轻量级解决方案。它使设备机器学习具有低延迟和更小的二进制体积。TensorFlow Lite 同时支持 Android 神经网络 API的硬件加速。TensorFlow Lite 使用多项技术降低延迟，例如移动 app 内核优化、pre-fused 激活、允许更快更小（定点）模型的量化内核。关于TensorFlow Lite 所包含的内容，有以下几点:</p><h3 id="TensorFlow-Lite-No-1"><a href="#TensorFlow-Lite-No-1" class="headerlink" title="TensorFlow Lite No.1"></a>TensorFlow Lite No.1</h3><p>支持一系列量子和浮点的核心运算符,并针对移动平台进行了优化。它结合 pre-fused 激活和其他技术来进一步提高性能和量化精度。此外，TensorFlow Lite 还支持在模型中使用自定义操作。</p><h3 id="TensorFlow-Lite-No-2"><a href="#TensorFlow-Lite-No-2" class="headerlink" title="TensorFlow Lite No.2"></a>TensorFlow Lite No.2</h3><p>TensorFlow Lite 基于FlatBuffers定义了一个新的模型文件格式。FlatBuffers 是一个开源的高效的跨平台序列化库。它与 protocol buffers类似,但主要区别是 FlatBuffers 常与 per-object 内存分配相结合在您直接访问数据时不需要再次解析包。此外，FlatBuffers 的代码体积比 protocol buffers 小很多。</p><h3 id="TensorFlow-Lite-No-3"><a href="#TensorFlow-Lite-No-3" class="headerlink" title="TensorFlow Lite No.3"></a>TensorFlow Lite No.3</h3><p>TensorFlow Lite 拥有一个新的移动设备优化的解释器保证应用程序的精简和快速。解释器使用静态图形排序和自定义（less-dynamic）内存分配器来确保最小的负载，初始化和执行延迟。</p><h3 id="TensorFlow-Lite-No-4"><a href="#TensorFlow-Lite-No-4" class="headerlink" title="TensorFlow Lite No.4"></a>TensorFlow Lite No.4</h3><p>TensorFlow Lite 针对支持的设备提供了一个利用硬件加速的接口。通过 Android 神经网络库，作为 Android O-MR1 的一部分发布。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>TensorFlow 是一个人人都触手可及的完全开源的机器学习框架，适用于众多领域，在研究工作以及实际产品开发中都能发挥重要的作用。Google还赋予了 TensorFlow 很快的运行速度，并使其能适应更多的应用领域。举例来说，清华大学自然语言处理实验室的研究人员已通过 TensorFlow 来加强他们对语言理解的研究工作；而像京东、小米等众多中国企业也在使用 TensorFlow。与此同时，在中国的初创公司当中，也有不少 TensorFlow 的使用者，CastBox就是其中之一。CastBox开发的播客应用程序利用 TensorFlow 对他们的用户偏好进行分析，并向听众提供个性化的推荐。</p><p>简而言之，TensorFlow 是一个端到端开源机器学习平台。它拥有一个包含各种工具、库和社区资源的全面灵活生态系统，可以让研究人员推动机器学习领域的先进技术的发展，并让开发者轻松地构建和部署由机器学习提供支持的应用。除此之外，TensorFlow可以轻松地构建模型，随时随地进行可靠的机器学习生产，以及实现强大的研究实验。</p><p>尽管人工智能已被越来越多的开发者们应用于前沿研究，或产品及服务的开发当中，但这仅仅是人工智能无限的潜力的冰山一角。人工智能的神奇之处，在于它能被应用在医疗保健、交通运输和环境保护等方方面面，为复杂的社会问题探寻解决方案。如今，在人工智能的协助下，人们得以探索全新的研究领域，开发创新的产品，让数以百万计的人类从中获益。</p>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    <content src="https://blog.kixcs.com/https://cdn.jsdelivr.net/gh/KuiperSirius/larix.cc@v1.0.9/article/article_img_33.jpg" type="image" />
    
    
      <category term="设计" scheme="https://blog.kixcs.com/categories/design/"/>
    
    
      <category term="Google" scheme="https://blog.kixcs.com/tags/Google/"/>
    
      <category term="TensorFlow" scheme="https://blog.kixcs.com/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>关于计算机系统安全的若干问题及解决方案</title>
    <link href="https://blog.kixcs.com/archives/38d9/"/>
    <id>https://blog.kixcs.com/archives/38d9/</id>
    <published>2020-02-25T11:51:14.000Z</published>
    <updated>2020-02-25T13:28:42.053Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a>引言：<p>2013年6月，前美国中央情报局技术分析员，爱德华.斯诺登将美国“棱镜”电子监听计划披露给英国《卫报》记者格伦·格林沃尔德。如今，有越来越多的证据显示，个人电子邮件，浏览信息，聊天记录，网站信息正在被大规模的监控。从斯诺登曝光的机密文件可看出，NAS（美国国家安全局）不仅通过网络远程监控，还通过“人力情报”项目的方式挖取个人隐私。人们有必要去采取必要手段来抑制有关机构这种不正当的行径，从而维护公民基本合法权益。</p><p>正文：</p><p>近年来，为应对信息全球化，美国Microsoft公司在数十年时间内锐意进取，Windows平台不断推陈出新。近年来，微软一贯采取率先发布预览版，采集用户反馈信息的方式去修复系统与应用软件不兼容问题，或是采取不定期发布系统安全补丁的方式来维持用户良好的操作环境。</p><p>截止到2016年5月25日，Windows操作系统占中国大陆比重高达79.96％。近年来，盗版微软系统在国内猖獗，早在Windows XP时代，国内用户普遍采取使用ISO镜像文件安装Ghost盗版系统，上至知名PC品牌售后服务中心，下至城镇电脑维修点，莫不如此。众所周知，制造者可使用UltraISO等软件编译指定的ISO文件，因此，安装未知来源的镜像系统存才不可忽视的安全风险。</p><p>伴随操作系统应运而生的是WinPE维护系统，在方便用户进行系统主引导区修复，还原和备份系统分区等操作的同时，紧随而来的安全问题也同样令人堪忧。例如，用户可以在硬件尚未自检，系统尚未启动的BIOS（CMOS）界面下，更改计算机的第一启动顺序为外部储存器（例如闪存盘或是移动硬盘），从而启动WinPE。在当前的维护系统界面中，市面上主流的PE系统（U深度，老毛桃，大白菜，一件工作室等）普遍内置了，例如ADSL账号密码获取工具，开机密码移除和账户添加工具等等。在方便用户对系统做出更改的同时，也给予不法分子以可乘之机。</p><p>例如，Windows操作系统中，与登录密码相关联的是主分区目录下的SAM文件,WinPE内置的工具中，可以指定访问C:\Windows\System32\Config\sam路径下的数据库文件。本人亲测，一方面，除微软账户登录选项的密码外，其他类型账户（包括Administrator账户），可以做到强制更改。另一方面，倘若只有微软账户登录选型，他人可以通过解锁Administrator账户，并且具有系统最高权限（众所周知，初始状态的Administrator账户是无密码）或是解锁Default Account，或是解锁Guest User账户来实现系统的访问。更有甚者，在更低版本的Windows系统中，例如Win7,Vista,WinXP，他人甚至无需登录WinPE系统就可以实现对SAM文件的修改。由此可见，老系统固然性能稳定，兼容性良好，但因存在市场时间太久，会暴露出有待改进的地方。</p><p>倘若不使用WinPE系统对开机密码做出修改，还可以通过命令提示符语句实现上述操作，具体步骤如下：假设当前使用的计算机主板的启动方式为UEFI，而不是慢慢退出市场的传统BIOS启动方式，则需要另做更改。开机按下F2键（不同品牌主板按键略有差异）不动，在“Boot”标签下，更改UEFI为Legacy Support，此时会有Legacy First字样，F10保存并退出。倘若可以正常进入系统，在管理员模式下运行命令提示符，输入“bcdedit /set {default} bootmenupolicy legacy”带系统显示:操作完成字样后退出即可。上述命令语句为实现安全模式的快速启动，按下F8即可进入。或是点下Shift选择重启即可一次性进入安全模式。或是倘若无法正常进入系统，要实现对安全模式的访问，若是笔记本电脑，在开机界面强制关机4~5次即可，若是台式计算机，用户可直接拔下电源，下次开机计算机会自动进入安全模式（注：上述方法会对计算机硬件造成不可逆损伤）。用户进入安全模式，在“疑难解惑”标签下选择“带有命令提示符的安全模式”。在对话框中输入“net user setName password /add”(注：setName为自定义用户名，password为自定义密码)即可实现对系统账户的添加（此账户不具管理员权限）。倘若要赋予该用户管理员权限，进入命令提示符，输入“net localgroup administrators setName”，即可将用户提升为系统管理组的用户，进而拥有最高权限。（注：本人亲测，在WinPE环境下运行命令提示符，上述操作无效。系统将显示“无法识别net关键字”从而无法执行命令语句）。当上述操作进行完毕，即可实现对并行账户的设置。值得说明的是，PIN码最初目的是：方便识别用户，快速登录系统，然而，它的级别实际上是低于密码的，用户可以强制更改密码，无需验证即可删除PIN码，或是在“登录选项”中选择重设的密码登录，进而窃取用户数据。总而言之，Windows密码只能在安全层面起到一定的阻拦作用，并不能完全规避风险。可见，大多数用户所使用的计算机并不如官方宣称那般固若金汤。</p><p>针对上述存在的安全风险，解决方案如下：</p><p>一：驱动器加密方式</p><p>针对Windows平台，用户可以使用Windows自身的驱动器加密功能：BitLocker。Windows Vista首次推出，Windows 7进行了完善，Win8,Win8.1,Win10进行了很好的继承。（编者注：Windows10专业版及其以上版本包含此功能，且设备支持TPM模块）BitLocker在Win10平台存在两种加密模式，兼容模式和快速模式。顾名思义，兼容模式可以使驱动器在更老的系统上运行，但存在弊病：加密速度迟缓且安全等级不高（本人亲测，针对西部数据1TB移动硬盘选择兼容模式，加密时间长达10小时，连续长时间的20MB/s的写入写出操作将给硬盘碟片造成不可逆损伤）。选择快速模式，则采用AES 128bit的加密方式。（截至目前为止，AES 256位加密方式对中国的技术出口被美国军方所限制，因此，大陆地区非商业用途最高为128位AES加密方式）只要用户设置的密码足够复杂，在现阶段量子计算机正处于研发阶段并未投入商业化的情况下，可以近似认为该加密方式完美。在设置驱动器密码短语结束后，用户应妥善保存48位的数字恢复秘钥并与之对应的标识符。（针对美国政府的“秘钥收集”计划，建议用户最好不选择保存在微软OneDrive云服务器，或是苹果iCloud云服务器上。）倘若用户希望针对系统分区进行驱动器加密，并设置硬件层面的安全保护。打开命令提示符并执行如下命令：“manage-bde -protectors -add c: -TPMAndStartupKey h”（注：h为外部储存介质的盘符）从而将.bek系统文件转移至外部储存介质，每次开机时，用户须插入指定U盘才可解锁系统。</p><p>二：局部加密方式</p><p>PGP(Pretty Good Privacy)，美国赛门铁克公司的安全软件，最高支持AES256位加密方式，支持构建PGP压缩包，虚拟分区，加密邮件等功能。用户可以自定义秘钥，用于新建虚拟磁盘或是加密整个驱动器或分区。2013年爱德华.斯诺登正是使用该软件，向英国《卫报》记者通过加密邮件提供了大量信息。在使用过程中，功能强悍的同时，操作较为麻烦。（本人亲测，PGP Desktop 10.2.0版本中，存在在U盘中加载虚拟分区后，USB设备存在无法正常弹出情况）。该软件截至目前为止，官方尚未发布简体中文版，用户需自行汉化（将汉化文件夹下所有文件覆盖粘贴至“String”文件目录下）。使用顺序最好为破解后汉化。本人注册机字样提供：</p><p>（附录：name: Team ACME;  Company: EViL Corp.</p><p>序列号：D49Z5JJQ013QVW360H0N5VJ1BZ0A  ）</p><p>GiliSoft File Lock Pro 10.6.0  加密方式，未知。同样作为一款文件加密软件，具有防止文件锁，文件加密，文件夹加密，针对外部USB设备文件夹加密等功能。其中的文件锁功能，可以在当前系统环境下有效防止文件的复制，剪切，粘贴，或是重命名等修改操作，进而防止数据的外泄，该软件被广泛应用于商业机构。据官网称，GiliSoft File Lock Pro 10.7.0版本的防止文件复制功能甚至在安全模式下依旧有效。在更早期的版本中，本人发现了致命性的漏洞（据本人实测，在10.6.0版本中，进入安全模式，用户可任意对文件做出修改，该保护功能失效）。或许更为早期的版本，还无法突破安全模式非系统进程的限制，致使在该环境下文件保护形同虚设。虽然该软件毁誉参半，但与其他加密软件组合使用仍能发挥一定作用。</p><p>三 ：设置CMOS密码</p><p>该方式作为更底层的加密方式可有效防止外部存储设备对系统的修改，但不可避免的同样存在安全漏洞，他人可以通过电池放电的方法使其恢复出厂设置，尽管系统时间会初始化，但显而易见的，原密码将不复存在。他人只需将将主板上的CMOS电池取下3min即可完成放电。因此，该方法不建议台式计算机使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    <content src="https://blog.kixcs.com/https://cdn.jsdelivr.net/gh/KuiperSirius/larix.cc@v1.0.9/article/article_img_35.jpg" type="image" />
    
    
      <category term="网络" scheme="https://blog.kixcs.com/categories/network/"/>
    
    
      <category term="Windows" scheme="https://blog.kixcs.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.kixcs.com/archives/24c0/"/>
    <id>https://blog.kixcs.com/archives/24c0/</id>
    <published>2020-02-23T12:48:37.000Z</published>
    <updated>2020-02-25T13:28:03.860Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==" title="https://hexo.io/">Hexo<i class="fa fa-external-link"></i></span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv" title="https://hexo.io/docs/">documentation<i class="fa fa-external-link"></i></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=" title="https://hexo.io/docs/troubleshooting.html">troubleshooting<i class="fa fa-external-link"></i></span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==" title="https://github.com/hexojs/hexo/issues">GitHub<i class="fa fa-external-link"></i></span>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s" title="https://hexo.io/docs/writing.html">Writing<i class="fa fa-external-link"></i></span></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=" title="https://hexo.io/docs/server.html">Server<i class="fa fa-external-link"></i></span></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s" title="https://hexo.io/docs/generating.html">Generating<i class="fa fa-external-link"></i></span></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s" title="https://hexo.io/docs/one-command-deployment.html">Deployment<i class="fa fa-external-link"></i></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    <content src="https://blog.kixcs.com/https://cdn.jsdelivr.net/gh/KuiperSirius/larix.cc@v1.0.9/article/article_img_36.jpg" type="image" />
    
    
      <category term="技术" scheme="https://blog.kixcs.com/categories/technique/"/>
    
    
      <category term="Hexo" scheme="https://blog.kixcs.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
